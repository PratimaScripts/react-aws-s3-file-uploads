{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","ev","setState","success","url","handleUpload","file","uploadInput","files","fileParts","name","split","fileName","fileType","console","log","axios","post","then","response","returnData","data","signedRequest","options","headers","put","result","catch","error","alert","JSON","stringify","state","errorMessage","SuccessMessage","style","padding","color","href","ErrorMessage","backgroundColor","className","this","onChange","ref","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sSAsFeA,E,kDAlFb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IASRC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,SAAS,EAAOC,IAAM,MAXrB,EAalBC,aAAe,SAACJ,GACd,IAAIK,EAAO,EAAKC,YAAYC,MAAM,GAE9BC,EAAY,EAAKF,YAAYC,MAAM,GAAGE,KAAKC,MAAM,KACjDC,EAAWH,EAAU,GACrBI,EAAWJ,EAAU,GACzBK,QAAQC,IAAI,wBACZC,IAAMC,KAAK,gCAAgC,CACzCL,SAAWA,EACXC,SAAWA,IAEZK,MAAK,SAAAC,GACJ,IAAIC,EAAaD,EAASE,KAAKA,KAAKD,WAChCE,EAAgBF,EAAWE,cAC3BlB,EAAMgB,EAAWhB,IACrB,EAAKF,SAAS,CAACE,IAAKA,IACpBU,QAAQC,IAAI,6BAA+BO,GAE3C,IAAIC,EAAU,CACZC,QAAS,CACP,eAAgBX,IAGpBG,IAAMS,IAAIH,EAAchB,EAAKiB,GAC5BL,MAAK,SAAAQ,GACJZ,QAAQC,IAAI,oBACZ,EAAKb,SAAS,CAACC,SAAS,OAEzBwB,OAAM,SAAAC,GACLC,MAAM,SAAWC,KAAKC,UAAUH,UAGnCD,OAAM,SAAAC,GACLC,MAAMC,KAAKC,UAAUH,QA5CvB,EAAKI,MAAQ,CACX7B,SAAU,EACVC,IAAM,GACNwB,OAAO,EACPK,aAAe,IAND,E,qDAmDR,IAAD,OACDC,EAAiB,kBACrB,yBAAKC,MAAO,CAACC,QAAQ,KACnB,wBAAID,MAAO,CAACE,MAAO,UAAnB,qBACA,uBAAGC,KAAM,EAAKN,MAAM5B,KAApB,wBACA,+BAGEmC,EAAe,kBACnB,yBAAKJ,MAAO,CAACC,QAAQ,KACnB,wBAAID,MAAO,CAACE,MAAO,QAAnB,iBACA,0BAAMF,MAAO,CAACE,MAAO,MAAOG,gBAAiB,UAA7C,WACA,8BAAO,EAAKR,MAAMC,cAClB,+BAGJ,OACE,yBAAKQ,UAAU,OACb,gCACE,6CACCC,KAAKV,MAAM7B,QAAU,kBAAC+B,EAAD,MAAoB,KACzCQ,KAAKV,MAAMJ,MAAQ,kBAACW,EAAD,MAAkB,KACtC,2BAAOI,SAAUD,KAAK1C,aAAc4C,IAAK,SAACA,GAAU,EAAKrC,YAAcqC,GAAQC,KAAK,SACpF,6BACA,4BAAQC,QAASJ,KAAKrC,cAAtB,gB,GA5EQ0C,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdnC,OAAM,SAAAC,GACLd,QAAQc,MAAMA,EAAMmC,c","file":"static/js/main.bba9401a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      success : false,\n      url : \"\",\n      error: false,\n      errorMessage : \"\"\n    }\n  }\n\n  handleChange = (ev) => {\n    this.setState({success: false, url : \"\"});\n  }\n  handleUpload = (ev) => {\n    let file = this.uploadInput.files[0];\n    // Split the filename to get the name and type\n    let fileParts = this.uploadInput.files[0].name.split('.');\n    let fileName = fileParts[0];\n    let fileType = fileParts[1];\n    console.log(\"Preparing the upload\");\n    axios.post(\"http://localhost:3001/sign_s3\",{\n      fileName : fileName,\n      fileType : fileType\n    })\n    .then(response => {\n      var returnData = response.data.data.returnData;\n      var signedRequest = returnData.signedRequest;\n      var url = returnData.url;\n      this.setState({url: url})\n      console.log(\"Recieved a signed request \" + signedRequest);\n\n      var options = {\n        headers: {\n          'Content-Type': fileType\n        }\n      };\n      axios.put(signedRequest,file,options)\n      .then(result => {\n        console.log(\"Response from s3\")\n        this.setState({success: true});\n      })\n      .catch(error => {\n        alert(\"ERROR \" + JSON.stringify(error));\n      })\n    })\n    .catch(error => {\n      alert(JSON.stringify(error));\n    })\n  }\n\n\n  render() {\n    const SuccessMessage = () => (\n      <div style={{padding:50}}>\n        <h3 style={{color: 'green'}}>SUCCESSFUL UPLOAD</h3>\n        <a href={this.state.url}>Access the file here</a>\n        <br/>\n      </div>\n    )\n    const ErrorMessage = () => (\n      <div style={{padding:50}}>\n        <h3 style={{color: 'red'}}>FAILED UPLOAD</h3>\n        <span style={{color: 'red', backgroundColor: 'black'}}>ERROR: </span>\n        <span>{this.state.errorMessage}</span>\n        <br/>\n      </div>\n    )\n    return (\n      <div className=\"App\">\n        <center>\n          <h1>UPLOAD A FILE</h1>\n          {this.state.success ? <SuccessMessage/> : null}\n          {this.state.error ? <ErrorMessage/> : null}\n          <input onChange={this.handleChange} ref={(ref) => { this.uploadInput = ref; }} type=\"file\"/>\n          <br/>\n          <button onClick={this.handleUpload}>UPLOAD</button>\n        </center>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}